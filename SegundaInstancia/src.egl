package marketplace;

import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.PrimaryKeyJoinColumn;

import uk.co.jemos.podam.common.PodamExclude;

@Entity
public class [%= table.name %]
{
	@Id
	private int id;	
[%

	//todas las columnas excepto id
	var cols = table.facts.select(f | f.isTypeOf(mp!Column)).select(c | c.name.asString() <> "id");
	var tableFk = table.facts.select(f | f.isTypeOf(mp!ForeignKey)).select(fk | fk.foreignTable.name.asString() <> "");
	var tableFkColumns = tableFk.collect(fk | fk.localColumns).flatten();
	
	var fks = mp!ForeignKey.all.select(fk | fk.foreignTable.name.asString() <> ""); 
	var otherTableFKs = fks.select(fk | fk.foreignTable.name == table.name);
	
	var simpleCols = cols.excludingAll(tableFkColumns);
	
	//imprimir atributos simples
	
	var simpleVars = table.getSimpleVars();
	var fkVars = table.getFKVars();
	
	for(myVar in simpleVars.keySet()) 
	{	
		var type = simpleVars.get(myVar).get('type');
		var name = simpleVars.get(myVar).get('name');
%]
	private [%=type%] [%=name%];
[%
	}	
%]

[%
	//imprimir atributos foreign key
	for(myVar in fkVars.keySet()) 
	{
		var name = fkVars.get(myVar).get('name');
		var type = fkVars.get(myVar).get('type');
%]
	@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)
	@PrimaryKeyJoinColumn
	@PodamExclude
	private [%=type%] [%=name%];
	
[%
	}	
%]

[%
	//imprimir atributos foreign key que apuntan a esta tabla
	for(fk in otherTableFKs) 
	{
%]
	@OneToMany(cascade = CascadeType.ALL, mappedBy="[%= table.name.firstToLowerCase %]")
	@PodamExclude
	private List<[%= fk.eContainer.name %]> [%= fk.eContainer.name.firstToLowerCase %]s;
	
[%
	}	
%]

	public [%= table.name %]() {
	
	}
	
	public int getId()
	{
		return id;
	}
	
	public void setId(int id)
	{
		this.id = id;
	}
	
[%
	//imprimir getters y setters simples
	for(myVar in simpleVars.keySet()) 
	{	
		var type = simpleVars.get(myVar).get('type');
		var name = simpleVars.get(myVar).get('name');
%]
	public [%=type%] get[%=name.firstToUpperCase()%]()
	{
		return [%=name%];
	}
	
	public void set[%=name.firstToUpperCase()%]([%=type%] [%=name%])
	{
		this.[%=name%] = [%=name%];
	}
[%	
	}
%]	


[%
	//imprimir getters y setters foreign keys
	for(myVar in fkVars.keySet()) 
	{	
		var name = fkVars.get(myVar).get('name');
		var type = fkVars.get(myVar).get('type');
%]
	public [%=type%] get[%=type%]()
	{
		return [%=name%];
	}
	
	public void set[%=type%]([%=type%] [%=name%])
	{
		this.[%=name%] = [%=name%];
	}
[%	
	}
%]	


[%
	//imprimir getters y setters fks que apuntan a esta tabla
	for(fk in otherTableFKs) 
	{	
%]
	public List<[%= fk.eContainer.name %]> get[%= fk.eContainer.name %]s()
	{
		return [%=fk.eContainer.name.firstToLowerCase%]s;
	}
	
	public void set[%=fk.eContainer.name%]s(List<[%= fk.eContainer.name%]> [%= fk.eContainer.name.firstToLowerCase()%]s)
	{
		this.[%= fk.eContainer.name.firstToLowerCase()%]s = [%= fk.eContainer.name.firstToLowerCase()%]s;
	}
[%	
	}
%]



	
}


	
[%

	operation mp!Table getSimpleVars(){
		var cols = self.facts.select(f | f.isTypeOf(mp!Column)).select(c | c.name.asString() <> "id");
		var tableFk = self.facts.select(f | f.isTypeOf(mp!ForeignKey)).select(fk | fk.foreignTable.name.asString() <> "");
		var tableFkColumns = tableFk.collect(fk | fk.localColumns).flatten();
		
		var simpleCols = cols.excludingAll(tableFkColumns);
		var vars = new Map();
		for(col in simpleCols ){
			var c = new Map();
			c.put('name', col.name);
			c.put('type', col.getType());
			c.put('object', col);
			vars.put(col.name, c);
		}
		return vars;
	}
	
	operation mp!Table getFKVars(){
		var tableFk = self.facts.select(f | f.isTypeOf(mp!ForeignKey)).select(fk | fk.foreignTable.name.asString() <> "");
		
		var vars = new Map();
		for(fk in tableFk) 
		{
 			var c = new Map();
			c.put('name', fk.foreignTable.name.firstToLowerCase());
			c.put('type', fk.foreignTable.name);
			c.put('object', fk);
			vars.put(fk.foreignTable.name.firstToLowerCase(), c);
		}	
		
		return vars;
	}
	
	operation mp!Table getClassVars(){
		var vars = new Map();
		vars.putAll(self.getSimpleVars());
		vars.putAll(self.getFKVars());
		return vars;
	}

	
	operation mp!Column getType() {
		if(self.type.asString() == "varchar(255)"){
			return 'String';
		}
		else{
			return self.type;
		}
	}	
%]